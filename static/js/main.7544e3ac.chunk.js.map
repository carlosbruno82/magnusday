{"version":3,"sources":["Assets/beep.mp3","Assets/cronometro.svg","Components/Cronometro.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cronometro","props","startCounting","state","seconds","total","totalInter","minutes","hours","clearInterval","timer","botao","min","minInter","h2","h3","beepPlay","beep","play","pauseAudio","numero","setState","setInterval","limpar","menos","mais","menosInter","maisInter","pause","currentTime","loop","Audio","require","bind","className","src","alt","onClick","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7544e3ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.327c021a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/cronometro.ceb8c47f.svg\";","import React, {Component} from 'react';\nimport '../Styles/Cronometro.css';\n\n\nclass Cronometro extends Component{\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            numero: '00:00:00',\n            h2: 0,\n            h3: 0,\n            botao: 'PLAY',\n            seconds: 0,\n            minutes: 0,\n            hours: 0,\n            min: 0,\n            minInter: 0,\n            total: 0,\n            totalInter: 0\n        }\n        this.beep = new Audio(require('../Assets/beep.mp3'))\n        this.timer = null\n        \n        this.startCounting = this.startCounting.bind(this)\n        this.play = this.play.bind(this)\n        this.limpar = this.limpar.bind(this)\n        this.pauseAudio = this.pauseAudio.bind(this)\n        this.menos = this.menos.bind(this)\n        this.mais = this.mais.bind(this)\n        this.menosInter = this.menosInter.bind(this)\n        this.maisInter = this.maisInter.bind(this)\n    }\n\n    startCounting = () => {\n        const state = this.state\n        state.seconds++;\n        state.total--;\n        state.totalInter--;\n              if (state.seconds >= 60) {\n                  state.seconds = 0;\n                  state.minutes++;\n                  if (state.minutes >= 60) {\n                      state.minutes = 0;\n                      state.hours++;\n                  }\n              }\n\n              if(state.total == 0){\n                  clearInterval(this.timer)\n                  this.timer = null\n                  state.botao = 'PLAY'\n                  state.min = 0\n                  state.minInter = 0\n                  state.h2 = state.min\n                  state.h3 = state.minInter\n                  state.total = 0\n                  state.totalInter =0\n                  this.beepPlay()\n              } \n\n              if(state.totalInter == 0){\n                  this.beep.play()\n                  state.totalInter = state.minInter * 60\n              } else if(state.totalInter == 57){\n                  this.pauseAudio()\n              }\n\n              state.numero = `${state.hours ? (state.hours > 9 ? state.hours : \"0\" + state.hours) : \"00\"}:${state.minutes ? (state.minutes > 9 ? state.minutes : \"0\" + state.minutes) : \"00\"}:${state.seconds > 9 ? state.seconds : \"0\" + state.seconds}`\n              this.setState(state)\n    } \n\n    play = () => {\n        const state = this.state\n        \n        if(this.timer !== null) {\n            clearInterval(this.timer)\n            this.timer = null\n            state.botao = 'PLAY'\n            \n        }   else {\n            this.timer = setInterval(this.startCounting, 1000)\n            state.botao = 'PAUSE'\n            this.pauseAudio()\n        }\n        this.setState(state)\n    }   \n\n    limpar = () => {\n        const state = this.state\n        \n        clearInterval(this.timer) \n        this.timer = null                 \n        state.botao = 'PLAY'\n        state.numero = '00:00:00'\n        state.seconds = 0\n        state.minutes = 0\n        state.hours = 0\n        state.min = 0\n        state.total = 0\n        state.h2 = state.min\n        state.minInter = 0\n        state.totalInter = 0\n        state.h3 = state.minInter\n        this.pauseAudio()\n        this.setState(state)\n    }\n\n    menos = () => {\n        const state = this.state\n        if(state.min < 0){\n            state.min = 0\n            state.h2 = state.min\n        } else if(state.min > 0){\n            state.min--\n            state.total -= 60\n            state.h2 = state.min\n        }\n        this.setState(state)\n    }\n\n    mais = () => {\n        const state = this.state\n        state.min++\n        state.total += 60\n        state.h2 = state.min\n        this.setState(state)\n    }\n\n    menosInter = () => {\n        const state = this.state\n        if(state.minInter < 0){\n            state.minInter = 0\n            state.h3 = state.minInter\n        } else if(state.minInter > 0){\n            state.minInter--\n            state.totalInter -= 60\n            state.h3 = state.minInter\n        }\n        this.setState(state)\n    }\n\n    maisInter = () => {\n        const state = this.state\n        state.minInter++\n        state.totalInter += 60\n        state.h3 = state.minInter\n        this.setState(state)\n    }\n\n    pauseAudio = () => {\n        this.beep.pause()\n        this.beep.currentTime = 0.0\n    }\n    \n    beepPlay = () => {\n        this.beep.loop = true\n        this.beep.play()\n    }\n    render(){\n        return(\n            <div className=\"container\">\n                <img src={require('../Assets/cronometro.svg')} alt=\"cronometro\"className=\"img\"/>\n                <div className=\"minuto\">\n                    <a className=\"btnMin\" onClick={this.menos}>-</a>\n                    <h2 className=\"total\">{this.state.h2}</h2>\n                    <a className=\"btnMin\" onClick={this.mais}>+</a>\n                </div>\n                <a className=\"magnusDay\">MagnusDay</a>\n                <h1 className=\"timer\">{this.state.numero}</h1>\n                \n                <div className=\"minuto\">\n                    <a className=\"btnInter\" onClick={this.menosInter}>-</a>\n                    <h3 className=\"totalInter\">{this.state.h3}</h3>\n                    <a className=\"btnInter\" onClick={this.maisInter}>+</a>\n                </div>\n                <div className=\"areabtn\">\n                    <a className=\"botao\" onClick={this.play} >{this.state.botao}</a>\n                    <a className=\"botao\" onClick={this.limpar}>LIMPAR</a>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Cronometro;","import React, {Component} from 'react';\nimport Cronometro from './Components/Cronometro';\n\nclass App extends Component{\n    \n  render(){\n      return(\n          <div>\n            <Cronometro />\n          </div>\n      )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}